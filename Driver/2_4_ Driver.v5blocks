{"mode":"Blocks","workspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"U`9aA+=)r+L1tzA.)-qi\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">myVariable</variable></variables><block type=\"v5_events_when_started\" id=\"k.uJzJ_#z7GU_-0dooXg\" x=\"50\" y=\"-250\"><next><block type=\"v5_looks_controller_play_rumble\" id=\",1yYyf~NVeOW(egg3u|F\"><field name=\"PATTERN\">----</field><field name=\"CONTROLLER\">Controller1</field><next><block type=\"v5_drivetrain_set_drive_velocity\" id=\"SG_^T*y?[qF(ycgOPgFq\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"zi%DCOQ7xs^||5$Ku){B\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"v5_motion_set_motor_velocity\" id=\"1$FBZZWfDMNZh+-gWTFC\"><field name=\"MOTOR\">IntakeMotors</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"D7S4D^$4~KEI7C:DOUee\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"v5_sensing_set_digital_out\" id=\"{Z!DU04EPgbqMmRq)}EI\"><field name=\"DIGITALOUT\">Expansion1</field><field name=\"STATE\">low</field><next><block type=\"v5_sensing_set_digital_out\" id=\"$poL49hJaq!Z@M}DY7r[\"><field name=\"DIGITALOUT\">Expansion2</field><field name=\"STATE\">high</field><next><block type=\"v5_sensing_set_digital_out\" id=\"VWVLT7L$,kPn,bjO6IGy\"><field name=\"DIGITALOUT\">Shootfunnel</field><field name=\"STATE\">high</field><next><block type=\"v5_control_while\" id=\"nwVd1FpMVtJ(pHi:]EHG\"><value name=\"CONDITION\"><block type=\"v5_operator_equal_to\" id=\"-SbRqgb,zJr:f3:Db,`.\"><value name=\"OPERAND1\"><shadow type=\"math_number\" id=\"h]x,3.-UyrZ$+:z3R+Z#\"><field name=\"NUM\">0</field></shadow></value><value name=\"OPERAND2\"><shadow type=\"math_number\" id=\"ert!r:pY,j2SO0uVo;1m\"><field name=\"NUM\">0</field></shadow></value></block></value><statement name=\"SUBSTACK\"><block type=\"v5_control_if_then\" id=\"U-wXW4({nX9tSD%u^JAC\"><value name=\"CONDITION\"><block type=\"v5_sensing_pressing_controller\" id=\":`+:)CcC8apgdQ[bW3!x\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonL1</field></block></value><statement name=\"SUBSTACK\"><block type=\"v5_motion_set_motor_velocity\" id=\"/yw?PE$jqL*bK,E5C,3u\"><field name=\"MOTOR\">Shooter</field><field name=\"UNITS\">rpm</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"TVPmTa#;ID6@YGQAr92z\"><field name=\"NUM\">250</field></shadow></value></block></statement><next><block type=\"v5_control_if_then\" id=\"HDzWQl/eJ}vj(cE1+nAq\"><value name=\"CONDITION\"><block type=\"v5_sensing_pressing_controller\" id=\"+]+~0NO|InlYwftY7uT4\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonL2</field></block></value><statement name=\"SUBSTACK\"><block type=\"v5_motion_set_motor_velocity\" id=\"EU$wqiHE,Yx!LvX34!~*\"><field name=\"MOTOR\">Shooter</field><field name=\"UNITS\">rpm</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"xtKPqD?6GC1Zid|6Jgb!\"><field name=\"NUM\">350</field></shadow></value></block></statement><next><block type=\"v5_control_while\" id=\"DC$a%^mCbz|JQt!fK%~z\"><value name=\"CONDITION\"><block type=\"v5_sensing_pressing_controller\" id=\"a~?fkw_i4F%`wZ%J.rW`\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonL2</field></block></value><statement name=\"SUBSTACK\"><block type=\"v5_motion_spin\" id=\"BL-_5*v$Sn;5H|+Lc5/j\"><field name=\"MOTOR\">Shooter</field><field name=\"DIRECTION\">fwd</field></block></statement><next><block type=\"v5_control_while\" id=\"D*]aQUD}f*F8[lAqUsh+\"><value name=\"CONDITION\"><block type=\"v5_sensing_pressing_controller\" id=\"aCF9BMCa[/rRl;IN}us1\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonL1</field></block></value><statement name=\"SUBSTACK\"><block type=\"v5_motion_spin\" id=\"VRQ^3PKK-o$Kcn95Q/4a\"><field name=\"MOTOR\">Shooter</field><field name=\"DIRECTION\">fwd</field></block></statement><next><block type=\"v5_control_if_then\" id=\"7G4rD3K*Ll{AYTHG(CCG\"><value name=\"CONDITION\"><block type=\"v5_operator_not\" id=\"8U3`I/wgd]:P1e#x-xQ/\"><value name=\"OPERAND\"><block type=\"v5_sensing_pressing_controller\" id=\"6Oo2B4NsN-I46rWd)1#3\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonL2</field></block></value></block></value><statement name=\"SUBSTACK\"><block type=\"v5_motion_stop_motor\" id=\"iu%,[$Z(BfXISaiYq:{U\"><field name=\"MOTOR\">Shooter</field></block></statement><next><block type=\"v5_control_if_then\" id=\"Y]3SbkD1TF!K|_b6e+Cl\"><value name=\"CONDITION\"><block type=\"v5_operator_not\" id=\"9;:`=Ba6r=52T#Zx[D@M\"><value name=\"OPERAND\"><block type=\"v5_sensing_pressing_controller\" id=\"(=Q6(H;)caqWJv_t91)?\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonL1</field></block></value></block></value><statement name=\"SUBSTACK\"><block type=\"v5_motion_stop_motor\" id=\"$hb]Z03oi0fFv~oC/]5e\"><field name=\"MOTOR\">Shooter</field></block></statement></block></next></block></next></block></next></block></next></block></next></block></statement></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block><block type=\"v5_events_when_controller_button\" id=\"HSmv)n7cpV~Ev`hmh0qG\" x=\"750\" y=\"-90\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonA</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"v5_sensing_set_digital_out\" id=\"~=7i+=m:hS,B804_/Rhk\"><field name=\"DIGITALOUT\">Expansion1</field><field name=\"STATE\">high</field><next><block type=\"v5_sensing_set_digital_out\" id=\"]TUNXp.Ept4oHt%fKDo`\"><field name=\"DIGITALOUT\">Expansion2</field><field name=\"STATE\">low</field></block></next></block></next></block><block type=\"v5_events_when_controller_button\" id=\":KhLo*BHi|#`yo$@G,uP\" x=\"670\" y=\"90\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonDown</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"v5_sensing_set_digital_out\" id=\"JsJhKgsW8P`jz+$(j1w9\"><field name=\"DIGITALOUT\">Shootfunnel</field><field name=\"STATE\">low</field><next><block type=\"v5_control_wait\" id=\"oCo$FlW^r$43m5G6Ri;S\"><value name=\"DURATION\"><shadow type=\"math_positive_number\" id=\"@Iy)X4{3VXJb%G=!A_DE\"><field name=\"NUM\">0.5</field></shadow></value><next><block type=\"v5_sensing_set_digital_out\" id=\"qTtw_a*~L*J]o%avnhl$\"><field name=\"DIGITALOUT\">Shootfunnel</field><field name=\"STATE\">high</field></block></next></block></next></block></next></block><block type=\"v5_events_when_controller_button\" id=\"TS;Zo@:O0#e3Q!/I.I/}\" x=\"590\" y=\"410\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonL2</field><field name=\"EVENTTYPE\">pressed</field></block><block type=\"v5_events_when_controller_button\" id=\"=cy(pYg;A*wk9B9bI;@x\" x=\"570\" y=\"690\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonL1</field><field name=\"EVENTTYPE\">pressed</field></block><block type=\"v5_events_when_controller_button\" id=\")%L5_$bPWF+=B-M!2-GQ\" x=\"570\" y=\"990\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonR2</field><field name=\"EVENTTYPE\">pressed</field></block><block type=\"v5_events_when_controller_button\" id=\"@;HBx89wAnZ.jpoI=qCk\" x=\"30\" y=\"1090\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonUp</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"v5_looks_print\" id=\"]47m*w4@CRoIw()b4#oC\"><field name=\"TARGET\">Controller1</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"A!%4V|Q?}%[3M;!jQUi6\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"v5_sensing_temperature_of_motor\" id=\"xX!aB:a).+{auC?d.]xk\"><field name=\"MOTOR\">IntakeMotors</field></block></value></block></next></block></xml>","rconfig":[{"port":[1,2,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"13.5","unit":"in","wheelbase":"10.5","wheelbaseUnit":"in","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[5],"name":"RollerMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[8,3],"name":"IntakeMotors","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio36_1","motor_a_reversed":"false","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"IntakeMotors","rightDir":"false","upDown":"","upDownDir":"false","xB":"RollerMotor","xBDir":"false","drive":"split","id":"primary"},"triportSourcePort":22},{"port":[3],"name":"Shootfunnel","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[6],"name":"Shooter","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[1],"name":"Expansion1","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[2],"name":"Expansion2","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22}],"slot":7,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor LeftDriveSmart = motor(PORT1, ratio18_1, false);\nmotor RightDriveSmart = motor(PORT2, ratio18_1, true);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 319.19, 342.9, 266.7, mm, 1);\n\nmotor RollerMotor = motor(PORT5, ratio36_1, false);\n\nmotor IntakeMotorsMotorA = motor(PORT8, ratio36_1, false);\nmotor IntakeMotorsMotorB = motor(PORT3, ratio36_1, false);\nmotor_group IntakeMotors = motor_group(IntakeMotorsMotorA, IntakeMotorsMotorB);\n\ncontroller Controller1 = controller(primary);\ndigital_out Shootfunnel = digital_out(Brain.ThreeWirePort.C);\nmotor Shooter = motor(PORT6, ratio6_1, false);\n\ndigital_out Expansion1 = digital_out(Brain.ThreeWirePort.A);\ndigital_out Expansion2 = digital_out(Brain.ThreeWirePort.B);\n\n\n\n\n\n// Generated code.\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool Controller1RightShoulderControlMotorsStopped = true;\nbool Controller1XBButtonsControlMotorsStopped = true;\nbool DrivetrainLNeedsToBeStopped_Controller1 = true;\nbool DrivetrainRNeedsToBeStopped_Controller1 = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      \n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = Axis3 + Axis1\n      // right = Axis3 - Axis1\n      int drivetrainLeftSideSpeed = Controller1.Axis3.position() + Controller1.Axis1.position();\n      int drivetrainRightSideSpeed = Controller1.Axis3.position() - Controller1.Axis1.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller1) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller1 = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller1) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller1 = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller1) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller1) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n      // check the ButtonR1/ButtonR2 status to control IntakeMotors\n      if (Controller1.ButtonR1.pressing()) {\n        IntakeMotors.spin(forward);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonR2.pressing()) {\n        IntakeMotors.spin(reverse);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (!Controller1RightShoulderControlMotorsStopped) {\n        IntakeMotors.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1RightShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonX/ButtonB status to control RollerMotor\n      if (Controller1.ButtonX.pressing()) {\n        RollerMotor.spin(forward);\n        Controller1XBButtonsControlMotorsStopped = false;\n      } else if (Controller1.ButtonB.pressing()) {\n        RollerMotor.spin(reverse);\n        Controller1XBButtonsControlMotorsStopped = false;\n      } else if (!Controller1XBButtonsControlMotorsStopped) {\n        RollerMotor.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1XBButtonsControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint Brain_precision = 0, Console_precision = 0, Controller1_precision = 0;\n\nfloat myVariable;\n\n// \"when started\" hat block\nint whenStarted1() {\n  Controller1.rumble(\"----\");\n  Drivetrain.setDriveVelocity(100.0, percent);\n  IntakeMotors.setVelocity(100.0, percent);\n  Expansion1.set(false);\n  Expansion2.set(true);\n  Shootfunnel.set(true);\n  while ((0.0 == 0.0)) {\n    if (Controller1.ButtonL1.pressing()) {\n      Shooter.setVelocity(250.0, rpm);\n    }\n    if (Controller1.ButtonL2.pressing()) {\n      Shooter.setVelocity(350.0, rpm);\n    }\n    while (Controller1.ButtonL2.pressing()) {\n      Shooter.spin(forward);\n    wait(5, msec);\n    }\n    while (Controller1.ButtonL1.pressing()) {\n      Shooter.spin(forward);\n    wait(5, msec);\n    }\n    if (!Controller1.ButtonL2.pressing()) {\n      Shooter.stop();\n    }\n    if (!Controller1.ButtonL1.pressing()) {\n      Shooter.stop();\n    }\n  wait(5, msec);\n  }\n  return 0;\n}\n\n// \"when Controller1 ButtonA pressed\" hat block\nvoid onevent_Controller1ButtonA_pressed_0() {\n  Expansion1.set(true);\n  Expansion2.set(false);\n}\n\n// \"when Controller1 ButtonDown pressed\" hat block\nvoid onevent_Controller1ButtonDown_pressed_0() {\n  Shootfunnel.set(false);\n  wait(0.5, seconds);\n  Shootfunnel.set(true);\n}\n\n// \"when Controller1 ButtonL2 pressed\" hat block\nvoid onevent_Controller1ButtonL2_pressed_0() {\n}\n\n// \"when Controller1 ButtonL1 pressed\" hat block\nvoid onevent_Controller1ButtonL1_pressed_0() {\n}\n\n// \"when Controller1 ButtonR2 pressed\" hat block\nvoid onevent_Controller1ButtonR2_pressed_0() {\n}\n\n// Used to find the format string for printing numbers with the\n// desired number of decimal places\nconst char* printToController1_numberFormat() {\n  // look at the current precision setting to find the format string\n  switch(Controller1_precision){\n    case 0:  return \"%.0f\"; // 0 decimal places (1)\n    case 1:  return \"%.1f\"; // 1 decimal place  (0.1)\n    case 2:  return \"%.2f\"; // 2 decimal places (0.01)\n    case 3:  return \"%.3f\"; // 3 decimal places (0.001)\n    default: return \"%f\"; // use the print system default for everthing else\n  }\n}\n\n// \"when Controller1 ButtonUp pressed\" hat block\nvoid onevent_Controller1ButtonUp_pressed_0() {\n  Controller1.Screen.print(printToController1_numberFormat(), static_cast<float>(IntakeMotors.temperature(percent)));\n}\n\n\nint main() {\n  // register event handlers\n  Controller1.ButtonA.pressed(onevent_Controller1ButtonA_pressed_0);\n  Controller1.ButtonDown.pressed(onevent_Controller1ButtonDown_pressed_0);\n  Controller1.ButtonL2.pressed(onevent_Controller1ButtonL2_pressed_0);\n  Controller1.ButtonL1.pressed(onevent_Controller1ButtonL1_pressed_0);\n  Controller1.ButtonR2.pressed(onevent_Controller1ButtonR2_pressed_0);\n  Controller1.ButtonUp.pressed(onevent_Controller1ButtonUp_pressed_0);\n\n  wait(15, msec);\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  whenStarted1();\n}","target":"Physical"}